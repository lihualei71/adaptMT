% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/adapt_model.R
\name{gen_adapt_model}
\alias{gen_adapt_model}
\title{adapt_model Objects for M-steps}
\usage{
gen_adapt_model(pifun = NULL, mufun = NULL, pifun_init = NULL,
  mufun_init = NULL, piargs = list(), muargs = list(),
  piargs_init = list(), muargs_init = list(), name = "")
}
\arguments{
\item{pifun}{a function to fit pi(x)}

\item{mufun}{a function to fit mu(x)}

\item{pifun_init}{a function to fit pi(x) at the initial step}

\item{mufun_init}{a function to fit mu(x) at the initial step}

\item{piargs}{a list. Arguments for "pifun". An empty list as default}

\item{muargs}{a list. Arguments for "mufun". An empty list as default}

\item{piargs_init}{a list. Arguments for piargs_init. An empty list as default}

\item{muargs_init}{a list. Arguments for muargs_init. An empty list as default}

\item{name}{a string. An optional argument for the user-specified name of the model. An empty string as default.}
}
\value{
\item{name}{same as the input \code{name}}
\item{algo}{a list recording \code{pifun}, \code{mufun}, \code{pifun_init} and \code{mufun_init}}
\item{args}{a list recording \code{piargs}, \code{muargs}, \code{piargs_init} and \code{muargs_init}}
}
\description{
\code{adapt_model} objects provide the functions and their arguments in computing the M-steps. Each object can be passed to \code{\link{adapt}} as a candidate model.
}
\examples{
# Generate 'adapt_model' for logistic-Gamma glm.
# pifun as a logistic regression
   pifun <- function(formula, data, ...){
       glm(formula, data, family = binomial(), ...)
   }
# pifun_init as a linear regression
   pifun_init <- function(formula, data, ...){
       glm(formula, data, family = gaussian(), ...)
   }
# Both mufun and mufun_init as Gamma GLMs (The real implementation in the package
# is more complicated than the following in order to handle the corner cases)
   mufun <- mufun_init <- function(formula, data, weights, ...){
       glm(formula, data, weights = weights, family = Gamma(), ...)
   }

library("splines") # for using ns() in the formula
piargs <- list(formula = "ns(x, df = 8)")
muargs <- list(formula = "ns(x, df = 8)")
name <- "glm"

mod <- gen_adapt_model(pifun, mufun, pifun_init, mufun_init,
                       piargs, muargs, name = name)
mod

}
